name: Build-and-Deploy
on:
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Experience Builder 1.18
      run: |
        echo "Downloading Experience Builder 1.18..."
        curl -o exb.zip "$(curl -s 'https://downloads.arcgis.com/dms/rest/download/secured/arcgis-experience-builder-1.18.zip?f=json&folder=software%2FExperienceBuilder%2F1.18' | python3 -c "import sys, json; print(json.load(sys.stdin)['url'])")"
    
    - name: Extract Experience Builder
      run: |
        echo "Extracting Experience Builder..."
        unzip -q exb.zip -d exb
        echo "Experience Builder extracted successfully"
    
    - name: Setup app directories
      run: |
        # Create the apps directory in the correct location (exb/server, not exb/ArcGISExperienceBuilder/server)
        mkdir -p exb/server/public/apps
        echo "Created apps directory at exb/server/public/apps"
    
    - name: Copy app files
      run: |
        echo "Copying app files..."
        cp -r apps/* exb/server/public/apps/
        echo "App files copied successfully"
        
        # Verify the copy worked
        echo "Contents of apps directory:"
        ls -la exb/server/public/apps/
    
    - name: Install client dependencies
      run: |
        echo "Installing client dependencies..."
        cd exb/client
        npm ci
    
    - name: Install server dependencies
      run: |
        echo "Installing server dependencies..."
        cd exb/server
        npm ci
        
    - name: Build client (dev)
      run: |
        echo "Building client (dev)..."
        cd exb/client
        npm run build:dev
        
    - name: Build client (prod)
      run: |
        echo "Building client (prod)..."
        cd exb/client
        npm run build:prod
        
    - name: Publish and build app
      run: |
        echo "Publishing and building app..."
        cd exb  # Note: working from the exb root directory now
        
        # Publish the app first
        echo "Publishing app..."
        node -e "
          const fs = require('fs');
          const configPath = './server/public/apps/0/config.json';
          
          if (fs.existsSync(configPath)) {
            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            config.published = true;
            fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
            console.log('App marked as published');
          } else {
            console.error('Config file not found at', configPath);
            process.exit(1);
          }
        "
        
        # Create the ZIP export
        echo "Creating ZIP export..."
        node -e "require('./server/src/middlewares/dev/apps/app-download.js').zipApp('0', 'app.zip')"
        
        # Verify ZIP was created
        if [ -f "app.zip" ]; then
          echo "app.zip created successfully"
          echo "File size: $(du -h app.zip)"
        else
          echo "ERROR: app.zip was not created"
          ls -la
          exit 1
        fi
    
    - name: Extract and deploy app
      run: |
        echo "Extracting app for deployment..."
        unzip -o -q exb/app.zip -d app
        chmod -R 777 app
        echo "App extracted successfully"
        
        # Verify extraction
        echo "Contents of app directory:"
        ls -la app/
    
    - name: Deploy to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_GSLDATA_PREVIEW }}'
        projectId: gsldata-preview
        channelId: pr-${{ github.event.number }}
