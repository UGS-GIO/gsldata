name: Build and Deploy to Firebase Production on Merge
on:
    push:
      branches:
        - main
jobs:
  Build-and-Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Download Experience Builder
        run: curl -o exb.zip "$(curl -s 'https://downloads.arcgis.com/dms/rest/download/secured/arcgis-experience-builder-1.17.zip?f=json&folder=software%2FExperienceBuilder%2F1.17' | python3 -c "import sys, json; print(json.load(sys.stdin)['url'])")"
      - name: Unzip Experience Builder
        run: unzip -q exb.zip -d exb
      # - name: Copy Custom Widgets
      # run: cp -r widgets/* exb/ArcGISExperienceBuilder/client/your-extensions/widgets
      # - name: Copy Custom Themes
      # run: cp -r themes/* exb/ArcGISExperienceBuilder/client/your-extensions/themes
      - name: Create App directory
        run: mkdir public && cd public && mkdir apps && cd apps
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Copy apps
        run: cp -r apps/* exb/ArcGISExperienceBuilder/server/public/apps
      - name: NPM install client folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: NPM install in server folder
        run: npm ci
        working-directory: exb/ArcGISExperienceBuilder/server
      - name: Build widgets - dev
        run: npm run build:dev
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Build widgets
        run: npm run build:prod
        working-directory: exb/ArcGISExperienceBuilder/client
      - name: Run download script
        run: node -e "require('./server/src/middlewares/dev/apps/app-download.js').zipApp('0', 'app.zip')"
        working-directory: exb/ArcGISExperienceBuilder
        env:
          NODE_ENV: production
      - name: Unzip app zip
        run: |
          unzip -o -q app.zip -d app
          chmod -R 777 app
        working-directory: exb/ArcGISExperienceBuilder
      
      - name: Insert Google Analytics and GTM
        run: |
          # Create insert-analytics.js file
          cat > insert-analytics.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          
          // Get environment variables
          const GA_ID = process.env.GA_ID;
          const GTM_ID = process.env.GTM_ID;
          
          // Path to the app directory where HTML files are located
          const appPath = path.join(process.cwd(), 'app');
          
          // Google Analytics code to insert after <head>
          const headCode = `<!-- Google tag (gtag.js) -->
          <script async src="https://www.googletagmanager.com/gtag/js?id=${GA_ID}"></script>
          <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${GA_ID}');
          </script>
          <!-- Google Tag Manager -->
          <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','${GTM_ID}');</script>
          <!-- End Google Tag Manager -->`;
          
          // Code to insert after <body>
          const bodyCode = `<!-- Google Tag Manager (noscript) -->
          <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=${GTM_ID}"
          height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
          <!-- End Google Tag Manager (noscript) -->`;
          
          // Function to recursively find HTML files
          function findHtmlFiles(directory) {
            let htmlFiles = [];
            const items = fs.readdirSync(directory);
            
            for (const item of items) {
              const fullPath = path.join(directory, item);
              const stat = fs.statSync(fullPath);
              
              if (stat.isDirectory()) {
                htmlFiles = htmlFiles.concat(findHtmlFiles(fullPath));
              } else if (item.endsWith('.html')) {
                htmlFiles.push(fullPath);
              }
            }
            
            return htmlFiles;
          }
          
          // Function to insert analytics code into HTML files
          function insertAnalytics(filePath) {
            console.log(`Processing ${filePath}`);
            let content = fs.readFileSync(filePath, 'utf8');
            
            // Insert after <head>
            content = content.replace(/<head>/i, `<head>\n  ${headCode}`);
            
            // Insert after <body>
            content = content.replace(/<body>/i, `<body>\n  ${bodyCode}`);
            
            fs.writeFileSync(filePath, content);
            console.log(`Analytics code inserted into ${filePath}`);
          }
          
          // Find and process all HTML files
          try {
            const htmlFiles = findHtmlFiles(appPath);
            console.log(`Found ${htmlFiles.length} HTML files`);
            
            for (const file of htmlFiles) {
              insertAnalytics(file);
            }
            
            console.log('Analytics code insertion complete!');
          } catch (error) {
            console.error('Error inserting analytics code:', error);
            process.exit(1);
          }
          EOL
          
          # Execute the script
          node insert-analytics.js
        working-directory: exb/ArcGISExperienceBuilder
        env:
          GTM_ID: ${{ secrets.GTM_ID }}
          GA_ID: ${{ secrets.GA_ID }}

      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UT_DNR_UGS_GSLHUB }}
          projectId: ut-dnr-ugs-gslhub
          channelId: live
